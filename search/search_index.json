{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>StateService is an enterprise-grade state management for Roblox with server/client architecture, automatic cleanup, callbacks, and real-time updates.</p> <ul> <li>For updates handled by Roblox, make sure to constantly update the package inside of the rbxmx file provided in the most recent release!</li> </ul> <p>API Reference: API</p> <p>Special thanks to loleris for inspiring me to make this type of module. Go check out their modules, they're really useful:</p> <ul> <li>Replica (Updated)</li> <li>ReplicaService (Deprecated)</li> <li>ProfileStore (Updated)</li> <li>ProfileService (Deprecated)</li> </ul>"},{"location":"API/","title":"API","text":"<p>Warning</p> <p>Parameter limitations apply to StateData.Value and client synchronization</p> <p>Error</p> <p>DO NOT YIELD in callback functions (OnEdited, OnRemoved, OnCalled). Yielding will cause state desync.</p> <p>Notice</p> <p>StateService will yield on require() if RemoteEvents aren't immediately available on client.</p>"},{"location":"API/#common-types","title":"Common Types","text":"<p>Instance <pre><code>Instance: Instance\n</code></pre></p> <p>StateName <pre><code>StateName: string\n</code></pre></p> <p>StateTemplate <pre><code>StateTemplate: any\n</code></pre></p> <p>StateCallbacks <pre><code>StateCallbacks: {\n    OnRemoved: ((Value: any, RemovedByLifespan: boolean) -&gt; ())?,\n    OnEdited: ((OldValue: any, NewValue: any) -&gt; ())?,\n    OnCalled: ((Caller: string, ...any) -&gt; ())?\n}\n</code></pre></p> <p>AuthorizationRule <pre><code>AuthorizationRule: {\n    ClientReadable: boolean?,\n    AuthorizedPlayers: {Player}?\n}\n</code></pre></p> <p>StateValue <pre><code>StateValue: any\n</code></pre></p>"},{"location":"API/#guarantees","title":"Guarantees","text":"<p>When client connects, all authorized states are immediately accessible via GetState().</p>"},{"location":"API/#stateservice-server","title":"StateService (Server)","text":""},{"location":"API/#stateserviceaddstate","title":"StateService:AddState","text":"<pre><code>StateService:AddState(\n    Instance: Instance,\n    StateName: string,\n    Template: any?,\n    Lifespan: number?,\n    Callbacks: StateCallbacks?,\n    Authorization: AuthorizationRule?\n) -&gt; boolean\n</code></pre>"},{"location":"API/#stateserviceeditstate","title":"StateService:EditState","text":"<pre><code>StateService:EditState(\n    Instance: Instance,\n    StateName: string,\n    NewValue: any,\n    Override: boolean?\n) -&gt; boolean\n</code></pre>"},{"location":"API/#stateserviceremovestate","title":"StateService:RemoveState","text":"<pre><code>StateService:RemoveState(\n    Instance: Instance,\n    StateName: string\n) -&gt; boolean\n</code></pre>"},{"location":"API/#stateservice-client","title":"StateService (Client)","text":""},{"location":"API/#stateservicegetstate","title":"StateService:GetState","text":"<pre><code>StateService:GetState(\n    Instance: Instance,\n    StateName: string\n) -&gt; StateData?\n</code></pre>"},{"location":"API/#stateservicehasstate","title":"StateService:HasState","text":"<pre><code>StateService:HasState(\n    Instance: Instance,\n    StateName: string\n) -&gt; boolean\n</code></pre>"},{"location":"API/#stateservicegetallstates","title":"StateService:GetAllStates","text":"<pre><code>StateService:GetAllStates(\n    Instance: Instance\n) -&gt; {[string]: StateData}\n</code></pre>"},{"location":"API/#statedata-structure","title":"StateData Structure","text":""},{"location":"API/#statedatavalue","title":"StateData.Value","text":"<pre><code>print(StateData.Value.Health) -- Access state data\nprint(StateData.CreatedAt) -- Timestamp when created\nprint(StateData.ExpiresAt) -- When it expires (if has lifespan)\n</code></pre>"},{"location":"API/#real-time-updates-client","title":"Real-Time Updates (Client)","text":""},{"location":"API/#state-changed-events","title":"State Changed Events","text":"<pre><code>if StateService.RemoteEvents and StateService.RemoteEvents.StateChanged then\n    StateService.RemoteEvents.StateChanged.OnClientEvent:Connect(\n        function(Instance: Instance, StateName: string, NewStateData: StateData)\n            print(\"State updated:\", StateName)\n            print(\"New value:\", NewStateData.Value)\n        end\n    )\nend\n</code></pre>"},{"location":"API/#state-removed-events","title":"State Removed Events","text":"<pre><code>if StateService.RemoteEvents and StateService.RemoteEvents.StateRemoved then\n    StateService.RemoteEvents.StateRemoved.OnClientEvent:Connect(\n        function(Instance: Instance, StateName: string, ExpiredByLifespan: boolean)\n            print(\"State removed:\", StateName, \"Expired:\", ExpiredByLifespan)\n        end\n    )\nend\n</code></pre>"},{"location":"API/#advanced-server-methods","title":"Advanced Server Methods","text":""},{"location":"API/#stateservicesetstatecallbacks","title":"StateService:SetStateCallbacks","text":"<pre><code>StateService:SetStateCallbacks(\n    Instance: Instance,\n    StateName: string,\n    Callbacks: StateCallbacks\n) -&gt; boolean\n</code></pre>"},{"location":"API/#stateservicesetstateauthorization","title":"StateService:SetStateAuthorization","text":"<pre><code>StateService:SetStateAuthorization(\n    Instance: Instance,\n    StateName: string,\n    Authorization: AuthorizationRule\n) -&gt; boolean\n</code></pre>"},{"location":"API/#stateserviceclearallstates","title":"StateService:ClearAllStates","text":"<pre><code>StateService:ClearAllStates(\n    Instance: Instance\n) -&gt; number\n</code></pre>"},{"location":"API/#utility-methods","title":"Utility Methods","text":""},{"location":"API/#stateservicegetinstancecount","title":"StateService:GetInstanceCount","text":"<pre><code>StateService:GetInstanceCount() -&gt; number -- Server only\n</code></pre>"},{"location":"API/#stateservicegettotalstatecount","title":"StateService:GetTotalStateCount","text":"<pre><code>StateService:GetTotalStateCount() -&gt; number -- Server only\n</code></pre>"},{"location":"Downloads/","title":"Downloads","text":"<p>You can find downloads to the files required here: https://github.com/kuromian/StateService/tags</p> <ul> <li>For updates handled by Roblox, make sure to constantly update the package inside of the rbxmx file provided in the most recent release!</li> </ul> <p>API Reference: API</p>"},{"location":"Tutorial/Basic%20Example/","title":"Basic Example","text":""},{"location":"Tutorial/Basic%20Example/#server","title":"Server","text":"<pre><code>--!strict\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal StateService = require(ReplicatedStorage.Modules.StateService)\n\nStateService:AddState(\n    workspace,\n    \"GameStats\",\n    {\n        PlayersOnline = 0\n    },\n    nil,\n    {\n        OnEdited = function(\n            OldValue,\n            NewValue\n        ): ()\n            print(\"Game stats updated - PlayersOnline:\", NewValue.PlayersOnline)\n        end\n    }, {\n        ClientReadable = true\n    }\n)\n\nPlayers.PlayerAdded:Connect(\n    function(Player: Player): ()\n        -- Create PRIVATE player profile\n        StateService:AddState(\n            Player,\n            \"PlayerData\",\n            {\n                Example = \"Hello World!\"\n            },\n            nil,\n            {\n                OnRemoved = function(\n                    Value,\n                    ExpiredByLifespan\n                ): ()\n                    print(`{Player.Name}'s data removed: {ExpiredByLifespan and \"expired\" or \"manual\"}`)\n\n                    print(`Saving Example: {Value}`)\n\n                    -- Saving stuff here\n                end,\n                OnEdited = function(\n                    OldValue,\n                    NewValue\n                ): ()\n                    if OldValue.Example ~= NewValue.Example then\n                        print(`{Player.Name}'s Example changed from {OldValue.Example} to {NewValue.Example}`)\n                    end\n                end,\n                OnCalled = function(\n                    Caller,\n                    ...\n                ): ()\n                    print(`Player data accessed via: {Caller}, for player: {Player.Name}`)\n                end\n            },\n            {\n                ClientReadable = true,\n                AuthorizedPlayers = {\n                    Player\n                }\n            }\n        )\n\n        -- Create PUBLIC player profile\n        StateService:AddState(\n            Player,\n            \"PublicProfile\",\n            {\n                DisplayName = Player.DisplayName\n            },\n            nil,\n            nil,\n            {\n                ClientReadable = true\n            }\n        )\n\n        local GameStats = StateService:GetState(\n            workspace,\n            \"GameStats\"\n        )\n\n        if GameStats then\n            (StateService :: any):EditState(\n                workspace,\n                \"GameStats\",\n                {\n                    PlayersOnline = #Players:GetPlayers()\n                }\n            )\n        end\n    end\n)\n\nPlayers.PlayerRemoving:Connect(\n    function(Player: Player): ()\n        local GameStats = StateService:GetState(\n            workspace,\n            \"GameStats\"\n        )\n\n        if GameStats then\n            (StateService :: any):EditState(\n                workspace,\n                \"GameStats\",\n                {\n                    PlayersOnline = math.max(\n                        0,\n                        #Players:GetPlayers() - 1\n                    )\n                }\n            )\n        end\n    end\n)\n</code></pre>"},{"location":"Tutorial/Basic%20Example/#client","title":"Client","text":"<pre><code>--!strict\nlocal Players = game:GetService(\"Players\")\nlocal ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal Player = Players.LocalPlayer\n\nlocal Modules_RS = ReplicatedStorage:WaitForChild(\"Modules\")\n\nlocal StateService = require(\n    Modules_RS:WaitForChild(\n        \"StateService\",\n        60\n    ) -- WaitForChild is crucial for the client.\n)\n\nprint(StateService:GetState(Player, \"PlayerData\"))\n</code></pre> <p>API Reference: API</p>"},{"location":"Tutorial/Setting%20Up/","title":"StateService Setup Instructions","text":""},{"location":"Tutorial/Setting%20Up/#download","title":"Download","text":"<p>Download the latest <code>.rbxmx</code> file from: GitHub Releases</p>"},{"location":"Tutorial/Setting%20Up/#installation","title":"Installation","text":"<ol> <li>Import the <code>.rbxmx</code> file into Roblox Studio</li> <li>Move each folder to its matching directory:</li> <li><code>ServerScriptService</code> \u2192 ServerScriptService</li> <li><code>ReplicatedStorage</code> \u2192 ReplicatedStorage</li> <li><code>StarterPlayerScripts</code> \u2192 StarterPlayer.StarterPlayerScripts</li> <li>Ungroup the folders after moving them</li> </ol>"},{"location":"Tutorial/Setting%20Up/#customization","title":"Customization","text":"<p>Optional: You can move the scripts to different locations - Edit the <code>require()</code> paths in Server and Client scripts to match your new locations</p>"},{"location":"Tutorial/Setting%20Up/#cleanup","title":"Cleanup","text":"<p>After installation, delete the original setup script from your game. That, or delete the whole folder all-together if you're sure you set it up right. Basically: It's another way to explain how to setup the module safely without the documentation.</p> <p>Basic Example Reference: Basic Example API Reference: API</p>"}]}